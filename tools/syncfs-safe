#!/usr/bin/env python

from optparse import OptionParser
from subprocess import call
from tempfile import mkstemp
import filecmp
import os
import sys
import stat

if len(sys.argv) < 2:
    sys.stdout.write('Usage: syncfs-safe <command>\n')
    sys.exit(2)

exe = sys.argv[1]
args = sys.argv[2:]

tempfiles = []
for i in xrange(len(args)):
    if os.path.exists(args[i]):
        already_replaced = False
        for realfile, tempfile in tempfiles:
            if os.abspath(args[i]) == os.abspath(realfile):
                args[i] = tempfile
                already_replaced = True
                break
        if already_replaced:
            continue
    
        (tf, tempfile) = mkstemp()
        tempfiles.append((args[i], tempfile))
    
        rf = os.open(args[i], os.O_RDONLY)
        os.write(tf, os.read(rf, os.fstat(rf)[stat.ST_SIZE] * 2))
        os.close(rf)
        os.close(tf)
    
        args[i] = tempfile

exitcode = call([exe] + args)

for realfile, tempfile in tempfiles:
    if filecmp.cmp(realfile, tempfile, shallow=False):
        continue

    tf = None
    rf = None
    try:
        tf = os.open(tempfile, os.O_RDONLY)
        rf = os.open(realfile, os.O_WRONLY)
        os.write(rf, os.read(tf, os.fstat(tf)[stat.ST_SIZE]))
    except OSError:
        sys.stderr.write('Error: problem writing "%s".\n' % (realfile,))
        exitcode = 1
    if rf:
        os.close(rf)
    if tf:
        os.close(tf)
    os.unlink(tempfile)

sys.exit(exitcode)
